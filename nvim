call plug#begin()
" Server configurations for builtin nvim LSP client
Plug 'neovim/nvim-lspconfig'

" rust-analyzer add-ons
Plug 'simrat39/rust-tools.nvim'

" movements for commenting code (using gc<movement>)
Plug 'tpope/vim-commentary'
" Git extensions
Plug 'tpope/vim-fugitive'
" netrw enhancements
Plug 'tpope/vim-vinegar'

" handles installing fzf for the terminal
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" fzf extensions
Plug 'junegunn/fzf.vim'
" Nice status bar
Plug 'itchyny/lightline.vim'
" Enhanced syntax higlighting for various languages (not complete due to
" limitations the syntax recognition in vim/nvim
Plug 'sheerun/vim-polyglot'

" Adds builtin support for generating doxygen comments based on code under the
" cursor
Plug 'vim-scripts/DoxygenToolkit.vim' 

" colorscheme
Plug 'sainnhe/sonokai'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

Plug 'hallison/vim-rdoc'

Plug 'kyazdani42/nvim-web-devicons'
Plug 'folke/trouble.nvim'

" LSP progress indicator
Plug 'j-hui/fidget.nvim'
call plug#end()
colorscheme sonokai

" Allows folding (z<movement>) to recognize syntax folding rules, i.e. folding
" on braces for C/C++
set foldmethod=syntax
" Set text to be unfolded by default
set nofoldenable
" enable syntax highlighting
syntax enable
" display line numbers
set number 

" if hidden is not set, TextEdit might fail.
set hidden

" set all tabs and shifts (<</>>) to be 4 columns wide
set tabstop=4
set softtabstop=4
set shiftwidth=4
" Better display for messages
set cmdheight=2

" Set completeopt to have a better completion experience
" :help completeopt
" menuone: popup even when there's only one match
" noinsert: Do not insert text until a selection is made
" noselect: Do not select, force user to select one from the menu
set completeopt=menuone,noinsert,noselect

" don't give |ins-completion-menu| messages.
set shortmess+=c 

" display signs in the line number column
set signcolumn=number 

" Use our horizontal real estate to show the 3-way diff
set diffopt+=vertical

let g:lightline = {
			\ 'active': {
			\	'left': [ [ 'mode', 'paste'],
			\			[ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
			\ },
			\ 'component_function': {
			\	'gitbranch': 'FugitiveHead'
			\ },
			\ }

" Remapping of <Esc> to allow fingrers to never leave home keys, and allow
" terminal mode to support vi keybindings in the shell
inoremap <silent>jk <Esc>
tnoremap <silent>jk <C-\><C-n>

" Easy switching between windows
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l

inoremap <C-h> <C-\><C-N><C-w>h
inoremap <C-j> <C-\><C-N><C-w>j
inoremap <C-k> <C-\><C-N><C-w>k
inoremap <C-l> <C-\><C-N><C-w>l

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Remove highlights caused by searching
nnoremap <C-x> :nohl<cr>

" mapping for fzf
nnoremap <C-g> :Rg<Cr>
nnoremap <C-f> :Files<Cr>
nnoremap <C-b> :Buffers<Cr>

" set up language server
lua << EOF
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<space>f', vim.lsp.buf.formatting, bufopts)
end
require'lspconfig'.volar.setup{
	on_attach = on_attach,
	filetypes = {'typescript', 'javascript', 'javascriptreact', 'typescriptreact', 'vue', 'json'}
}
require('rust-tools').setup({
	server={
		on_attach=on_attach
	}})
require('fidget').setup({})
EOF

